using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using UnityEngine;

namespace Core.Objects.Zones
{
    public class ReversedAbstractZone<TEffect> : AbstractZone<TEffect>
        where TEffect : AbstractState
    {
        public StatableObject TargetForInfluence;

        protected override void OnTriggerEnter(Collider other)
        {
            if (TargetForInfluence == null)
                return;
            if (other.GetComponent<StatableObject>() == null)
                return;
            if (!TagsForTakingInfluence.Contains(other.tag))
                return;
            var otherT = other.GetComponent<Transform>();
            if (!influenced.Contains(otherT))
            {
                var otherP = other.GetComponent<PoolableObject>();
                if (otherP != null)
                    otherP.Deactivated += OtherDeactivated;
                influenced.Add(otherT);
            }
            IncludeInfluence(TargetForInfluence);
        }

        protected override void LeaveZone(Transform t)
        {
            if (TargetForInfluence == null)
                return;
            if (t == null)
                return;
            var p = t.GetComponent<PoolableObject>();
            if (p != null)
                p.Deactivated -= OtherDeactivated;
            DisableInfluence(TargetForInfluence);
        }
    }
}
