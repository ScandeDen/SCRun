using Core.Spawners;
using NUnit.Framework;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using UnityEngine;

namespace Tests.Core.Spawners
{
    public class SpawnGroupsFactory
    {
        public static IEnumerable WorldItemGroupsTestCasesFor10Rows
        {
            get
            {
                return GetWorldItemGroupsTestCases(10);
            }
        }

        public static IEnumerable GetWorldItemGroupsTestCases(int forRowsCount)
        {
            var groups = new List<WrappedWorldItemGroup>();
            yield return new TestCaseData(groups.ToArray()).
                SetName("Spawned 0 group");
            var group = new WorldItemsGroup();
            group.MaxCellsDelaySpawn = 1;
            group.MinCellsDelaySpawn = 1;
            group.Cases.Add(new SpawnCase(KeyedPoolsFactory.POOL1.PoolKey, 100));
            groups.Add(new WrappedWorldItemGroup(group));
            yield return new TestCaseData(groups.ToArray()).
                SetName("Spawned 1 group: {min1-max1: " + 
                    KeyedPoolsFactory.POOL1.PoolKey + "}");
            group = new WorldItemsGroup();
            group.MaxCellsDelaySpawn = 2;
            group.MinCellsDelaySpawn = 2;
            group.Cases.Add(new SpawnCase(KeyedPoolsFactory.POOL1.PoolKey, 100));
            group.MaxCellsDelaySpawn = 3;
            group.MinCellsDelaySpawn = 3;
            group.Cases.Add(new SpawnCase(KeyedPoolsFactory.POOL2.PoolKey, 50));
            groups.Add(new WrappedWorldItemGroup(group));
            yield return new TestCaseData(groups.ToArray()).
                SetName("Spawned 2 group: {min1-max1: " + KeyedPoolsFactory.POOL1.PoolKey
                    + "},{min2-max2: " + KeyedPoolsFactory.POOL1.PoolKey
                    + " min3-max3: " + KeyedPoolsFactory.POOL2.PoolKey + "}");
        }
    }

    public struct WrappedWorldItemGroup
    {
        public WorldItemsGroup Group;

        public WrappedWorldItemGroup(WorldItemsGroup group)
        {
            this.Group = group;
        }
    }
}
